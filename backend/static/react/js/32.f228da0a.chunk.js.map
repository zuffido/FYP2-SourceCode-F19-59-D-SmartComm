{"version":3,"sources":["../node_modules/@coreui/react-chartjs/es/CChart.js","views/charts/Charts.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","months","CChart","props","innerRef","datasets","labels","options","plugins","type","attributes","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","compData","useRef","firstRun","current","_useState","useState","chart","setChart","ref","safeId","Math","random","toString","replace","destroyChart","destroy","dataset","data","computedLabels","useMemo","emptyLabels","Array","fill","map","u","JSON","stringify","customTooltips","tooltips","enabled","custom","cuiCustomTooltips","intersect","mode","position","callbacks","labelColor","tooltipItem","prop","datasetIndex","backgroundColor","tooltipLabelColor","pointHoverBackgroundColor","borderColor","index","chartConfig","useEffect","update","Chart","getContext","React","createElement","id","propTypes","CChartBar","CChartLine","CChartDoughnut","CChartRadar","CChartPie","CChartPolarArea","Charts","columns","className","href","label","pointBackgroundColor","pointBorderColor","pointHoverBorderColor","aspectRatio"],"mappings":"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","file":"js/32.f228da0a.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport { customTooltips as cuiCustomTooltips } from '@coreui/chartjs';\nimport '@coreui/chartjs/dist/css/coreui-chartjs.css';\nvar months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nvar key = function key() {\n  return Math.random().toString(36).replace('0.', '');\n}; //component - CoreUI / CChart\n\n\nvar CChart = function CChart(props) {\n  var innerRef = props.innerRef,\n      datasets = props.datasets,\n      labels = props.labels,\n      options = props.options,\n      plugins = props.plugins,\n      type = props.type,\n      attributes = _objectWithoutPropertiesLoose(props, [\"innerRef\", \"datasets\", \"labels\", \"options\", \"plugins\", \"type\"]);\n\n  var compData = useRef({\n    firstRun: true\n  }).current;\n\n  var _useState = useState(),\n      chart = _useState[0],\n      setChart = _useState[1];\n\n  var ref = useRef();\n  var safeId = useState('safe_id_' + key())[0]; // methods\n\n  var renderChart = function renderChart() {\n    destroyChart();\n    setChart(new Chart(ref.current.getContext('2d'), chartConfig));\n  };\n\n  var updateChart = function updateChart() {\n    Object.assign(chart, chartConfig);\n    chart.update();\n  };\n\n  var destroyChart = function destroyChart() {\n    return chart && chart.destroy();\n  };\n\n  var dataset = datasets && datasets[0] && datasets[0].data || [];\n  var computedLabels = useMemo(function () {\n    if (labels && typeof labels !== 'string') {\n      return labels;\n    }\n\n    var emptyLabels = Array(dataset.length).fill('');\n\n    if (labels === 'indexes') {\n      return emptyLabels.map(function (u, i) {\n        return i + 1;\n      });\n    } else if (labels === 'months') {\n      return emptyLabels.map(function (u, i) {\n        return months[i % 12];\n      });\n    }\n\n    return emptyLabels;\n  }, [JSON.stringify(labels), dataset.length]);\n\n  var customTooltips = function () {\n    if (options && options.tooltips) {\n      return;\n    }\n\n    return {\n      tooltips: {\n        enabled: false,\n        custom: cuiCustomTooltips,\n        intersect: true,\n        mode: 'index',\n        position: 'nearest',\n        callbacks: {\n          labelColor: function labelColor(tooltipItem, chart) {\n            function getValue(prop) {\n              return typeof prop === 'object' ? prop[tooltipItem.index] : prop;\n            }\n\n            var dataset = chart.data.datasets[tooltipItem.datasetIndex]; //tooltipLabelColor is coreUI custom prop used only here\n\n            var backgroundColor = getValue(dataset.tooltipLabelColor || dataset.pointHoverBackgroundColor || dataset.borderColor || dataset.backgroundColor);\n            return {\n              backgroundColor: backgroundColor\n            };\n          }\n        }\n      }\n    };\n  }();\n\n  var computedOptions = function () {\n    return Object.assign({}, options, customTooltips || {});\n  }();\n\n  var chartConfig = {\n    type: type,\n    data: {\n      datasets: datasets,\n      labels: computedLabels\n    },\n    options: computedOptions,\n    plugins: plugins\n  };\n  useEffect(function () {\n    if (compData.firstRun) return;\n    updateChart();\n  }, [chartConfig]);\n  useEffect(function () {\n    renderChart();\n    compData.firstRun = false;\n    return function () {\n      return destroyChart();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, attributes, {\n    ref: innerRef\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: safeId,\n    ref: ref\n  }));\n};\n\nCChart.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  datasets: PropTypes.array,\n  labels: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  options: PropTypes.object,\n  plugins: PropTypes.array,\n  type: PropTypes.string\n} : {};\n\nvar CChartBar = function CChartBar(props) {\n  return /*#__PURE__*/React.createElement(CChart, _extends({}, props, {\n    type: \"bar\"\n  }));\n};\n\nvar CChartHorizontalBar = function CChartHorizontalBar(props) {\n  return /*#__PURE__*/React.createElement(CChart, _extends({}, props, {\n    type: \"horizontalBar\"\n  }));\n};\n\nvar CChartLine = function CChartLine(props) {\n  return /*#__PURE__*/React.createElement(CChart, _extends({}, props, {\n    type: \"line\"\n  }));\n};\n\nvar CChartDoughnut = function CChartDoughnut(props) {\n  return /*#__PURE__*/React.createElement(CChart, _extends({}, props, {\n    type: \"doughnut\"\n  }));\n};\n\nvar CChartRadar = function CChartRadar(props) {\n  return /*#__PURE__*/React.createElement(CChart, _extends({}, props, {\n    type: \"radar\"\n  }));\n};\n\nvar CChartPie = function CChartPie(props) {\n  return /*#__PURE__*/React.createElement(CChart, _extends({}, props, {\n    type: \"pie\"\n  }));\n};\n\nvar CChartPolarArea = function CChartPolarArea(props) {\n  return /*#__PURE__*/React.createElement(CChart, _extends({}, props, {\n    type: \"polarArea\"\n  }));\n};\n\nvar CCharts = function CCharts(props) {\n  console.warn('<CCharts> component has been deprecated. Use <CChart> or <CChart{type}> instead');\n  return /*#__PURE__*/React.createElement(CChart, props);\n};\n\nexport { CChart, CCharts, CChartBar, CChartHorizontalBar, CChartLine, CChartDoughnut, CChartRadar, CChartPie, CChartPolarArea };","import React from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCardHeader\r\n} from '@coreui/react'\r\nimport {\r\n  CChartBar,\r\n  CChartLine,\r\n  CChartDoughnut,\r\n  CChartRadar,\r\n  CChartPie,\r\n  CChartPolarArea\r\n} from '@coreui/react-chartjs'\r\n\r\nconst Charts = () => {\r\n\r\n  return (\r\n    <CCardGroup columns className = \"cols-2\" >\r\n      <CCard>\r\n        <CCardHeader>\r\n          Bar Chart\r\n          <div className=\"card-header-actions\">\r\n            <a href=\"http://www.chartjs.org\" className=\"card-header-action\">\r\n              <small className=\"text-muted\">docs</small>\r\n            </a>\r\n          </div>\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartBar\r\n            type=\"bar\"\r\n            datasets={[\r\n              {\r\n                label: 'GitHub Commits',\r\n                backgroundColor: '#f87979',\r\n                data: [40, 20, 12, 39, 10, 40, 39, 80, 40, 20, 12, 11]\r\n              }\r\n            ]}\r\n            labels=\"months\"\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          Doughnut Chart\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartDoughnut\r\n            type=\"doughnut\"\r\n            datasets={[\r\n              {\r\n                backgroundColor: [\r\n                  '#41B883',\r\n                  '#E46651',\r\n                  '#00D8FF',\r\n                  '#DD1B16'\r\n                ],\r\n                data: [40, 20, 80, 10]\r\n              }\r\n            ]}\r\n            labels={['VueJs', 'EmberJs', 'ReactJs', 'AngularJs']}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          Line Chart\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartLine\r\n            type=\"line\"\r\n            datasets={[\r\n              {\r\n                label: 'Data One',\r\n                backgroundColor: 'rgb(228,102,81,0.9)',\r\n                data: [30, 39, 10, 50, 30, 70, 35]\r\n              },\r\n              {\r\n                label: 'Data Two',\r\n                backgroundColor: 'rgb(0,216,255,0.9)',\r\n                data: [39, 80, 40, 35, 40, 20, 45]\r\n              }\r\n            ]}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n            labels=\"months\"\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          Pie Chart\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartPie\r\n            type=\"pie\"\r\n            datasets={[\r\n              {\r\n                backgroundColor: [\r\n                  '#41B883',\r\n                  '#E46651',\r\n                  '#00D8FF',\r\n                  '#DD1B16'\r\n                ],\r\n                data: [40, 20, 80, 10]\r\n              }\r\n            ]}\r\n            labels={['VueJs', 'EmberJs', 'ReactJs', 'AngularJs']}\r\n            options={{\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          Polar Area Chart\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartPolarArea\r\n            type=\"polarArea\"\r\n            datasets={[\r\n              {\r\n                label: 'My First dataset',\r\n                backgroundColor: 'rgba(179,181,198,0.2)',\r\n                pointBackgroundColor: 'rgba(179,181,198,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: 'rgba(179,181,198,1)',\r\n                pointHoverBorderColor: 'rgba(179,181,198,1)',\r\n                data: [65, 59, 90, 81, 56, 55, 40]\r\n              },\r\n              {\r\n                label: 'My Second dataset',\r\n                backgroundColor: 'rgba(255,99,132,0.2)',\r\n                pointBackgroundColor: 'rgba(255,99,132,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: 'rgba(255,99,132,1)',\r\n                pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n                data: [28, 48, 40, 19, 96, 27, 100]\r\n              }\r\n            ]}\r\n            options={{\r\n              aspectRatio: 1.5,\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n            labels={[\r\n              'Eating', 'Drinking', 'Sleeping', 'Designing',\r\n              'Coding', 'Cycling', 'Running'\r\n            ]}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          Radar Chart\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartRadar\r\n            type=\"radar\"\r\n            datasets={[\r\n              {\r\n                label: '2019',\r\n                backgroundColor: 'rgba(179,181,198,0.2)',\r\n                borderColor: 'rgba(179,181,198,1)',\r\n                pointBackgroundColor: 'rgba(179,181,198,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(179,181,198,1)',\r\n                tooltipLabelColor: 'rgba(179,181,198,1)',\r\n                data: [65, 59, 90, 81, 56, 55, 40]\r\n              },\r\n              {\r\n                label: '2020',\r\n                backgroundColor: 'rgba(255,99,132,0.2)',\r\n                borderColor: 'rgba(255,99,132,1)',\r\n                pointBackgroundColor: 'rgba(255,99,132,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n                tooltipLabelColor: 'rgba(255,99,132,1)',\r\n                data: [28, 48, 40, 19, 96, 27, 100]\r\n              }\r\n            ]}\r\n            options={{\r\n              aspectRatio: 1.5,\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n            labels={[\r\n              'Eating', 'Drinking', 'Sleeping', 'Designing',\r\n              'Coding', 'Cycling', 'Running'\r\n            ]}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n    </CCardGroup>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"],"sourceRoot":""}